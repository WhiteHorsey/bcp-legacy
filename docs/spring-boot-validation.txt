@NotNull: to say that a field must not be null.
@NotEmpty: to say that a list field must not empty.
@NotBlank: to say that a string field must not be the empty string (i.e. it must have at least one character).
@Min and @Max: to say that a numerical field is only valid when it’s value is above or below a certain value.
@Pattern: to say that a string field is only valid when it matches a certain regular expression.
@Email: to say that a string field must be a valid email address.


############################################### @Validated ###############################################
The @Validated annotation is a class-level annotation that we can use to tell Spring to validate parameters
that are passed into a method of the annotated class.

############################################### @Valid ###############################################
We can put the @Valid annotation on method parameters and fields to tell Spring that we want a 
method parameter or field to be validated.

############################################### FAIL ###############################################
If the validation fails, it will trigger a MethodArgumentNotValidException. By default, Spring will 
translate this exception to a HTTP status 400 (Bad Request).

############################################### Validating Input to a Spring MVC Controller ###############################################
Let’s say we have implemented a Spring REST controller and want to validate the input that' passed in by a client.
There are three things we can validate for any incoming HTTP request:

1- the request body,
2- variables within the path (e.g. id in /foos/{id}) and,
3- query parameters.

############################################### Validating a Request Body ###############################################
class Input {

  @Min(1)
  @Max(10)
  private int numberBetweenOneAndTen;

  @Pattern(regexp = "^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$")
  private String ipAddress;
  
  // ...
}

-------------------> REST CONROLLER
@RestController
class ValidateRequestBodyController {

  @PostMapping("/validateBody")
  ResponseEntity<String> validateBody(@Valid @RequestBody Input input) {
    return ResponseEntity.ok("valid");
  }

}


############################################### Validating Path Variables and Request Parameters ###############################################

@RestController
@Validated ---------------------> NEW tell Spring to evaluate the constraint annotations on method parameters
class ValidateParametersController {

  @GetMapping("/validatePathVariable/{id}")
  ResponseEntity<String> validatePathVariable(
      @PathVariable("id") @Min(5) int id) { ---------------------> NEW ADD MIN DIRECTLY
    return ResponseEntity.ok("valid");
  }
  
  @GetMapping("/validateRequestParameter")
  ResponseEntity<String> validateRequestParameter(
      @RequestParam("param") @Min(5) int param) { ---------------------> NEW ADD MIN DIRECTLY
    return ResponseEntity.ok("valid");
  }
}
---------------------------------------------> IF IT FAILS
In contrast to request body validation a failed validation will trigger a ConstraintViolationException
instead of a MethodArgumentNotValidException. Spring does not register a default exception handler
for this exception, so it will by default cause a response with HTTP status 500 (Internal Server Error).

@ExceptionHandler(ConstraintViolationException.class)
  @ResponseStatus(HttpStatus.BAD_REQUEST)
  ResponseEntity<String> handleConstraintViolationException(ConstraintViolationException e) {
    return new ResponseEntity<>("not valid due to validation error: " + e.getMessage(), HttpStatus.BAD_REQUEST);
  }


################### Validating JPA Entities :Is the Persistence Layer the right Place for Validation? ###################
We usually don't want to do validation as late as in the persistence layer because it means that 
the business code above has worked with potentially invalid objects which may lead to unforeseen errors. 
More on this topic in my article about Bean Validation anti-patterns.

################### Examples ###################

@NotNull: to say that a field must not be null.
@NotEmpty: to say that a list field must not empty.
@NotBlank: to say that a string field must not be the empty string (i.e. it must have at least one character).
@Min and @Max: to say that a numerical field is only valid when it’s value is above or below a certain value.
@Pattern: to say that a string field is only valid when it matches a certain regular expression.
@Email: to say that a string field must be a valid email address.
package bcp.socle.antivirus.clamav;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.nio.charset.StandardCharsets;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import bcp.socle.antivirus.AntivirusService;
import bcp.socle.antivirus.AntivirusSizeLimitException;

/**
 * @author bilalslayki
 *
 */
@Service
public class AntivirusServiceImpl implements AntivirusService {

	@Value("${clamd.host}")
	private String host;

	@Value("${clamd.port}")
	private String port;

	@Value("${clamd.timeout}")
	private String timeout;

	// Il ne faut pas dépasser la valeur du paramètre "StreamMaxLength" défini dans
	// "clamd.conf"
	private static final int CHUNK_SIZE = 2048;

	@Override
	public boolean scan(InputStream is) throws IOException {
		byte[] reply = this.process(is);
		String r = new String(reply, StandardCharsets.US_ASCII);
		return (r.contains("OK") && !r.contains("FOUND"));
	}

	private byte[] process(InputStream is) throws IOException {
		try (Socket s = new Socket(this.host, Integer.parseInt(this.port)); OutputStream outs = s.getOutputStream()) {
			s.setSoTimeout(Integer.parseInt(this.timeout));

			outs.write(this.asBytes("zINSTREAM\0"));
			outs.flush();
			byte[] chunk = new byte[AntivirusServiceImpl.CHUNK_SIZE];

			try (InputStream clamIs = s.getInputStream()) {
				int read = is.read(chunk);
				while (read >= 0) {
					byte[] chunkSize = ByteBuffer.allocate(4).putInt(read).array();

					outs.write(chunkSize);
					outs.write(chunk, 0, read);
					if (clamIs.available() > 0) {
						byte[] reply = this.assertSizeLimit(this.readAll(clamIs));
						throw new IOException(
								"Scan aborted. Reply from server: " + new String(reply, StandardCharsets.US_ASCII));
					}
					read = is.read(chunk);
				}

				outs.write(new byte[] { 0, 0, 0, 0 });
				outs.flush();
				return this.assertSizeLimit(this.readAll(clamIs));
			}
		}
	}

	private byte[] assertSizeLimit(byte[] reply) {
		String r = new String(reply, StandardCharsets.US_ASCII);
		if (r.startsWith("INSTREAM size limit exceeded.")) {
			throw new AntivirusSizeLimitException("Clamd size limit exceeded. Full reply from server: " + r);
		}
		return reply;
	}

	private byte[] asBytes(String s) {
		return s.getBytes(StandardCharsets.US_ASCII);
	}

	private byte[] readAll(InputStream is) throws IOException {
		ByteArrayOutputStream tmp = new ByteArrayOutputStream();

		byte[] buf = new byte[2000];
		int read = 0;
		do {
			read = is.read(buf);
			tmp.write(buf, 0, read);
		} while ((read > 0) && (is.available() > 0));
		return tmp.toByteArray();
	}
}
